"""
GPIO —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è Robot Framework —Ç–µ—Å—Ç–æ–≤
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å GPIO –≤ —Ç–µ—Å—Ç–∞—Ö
"""

import subprocess
import json
import os
import time
from typing import Dict, List, Any, Optional


class GPIOTestUtils:
    """–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è GPIO —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
    
    def __init__(self, project_root: str = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Ç–∏–ª–∏—Ç GPIO
        
        Args:
            project_root: –ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞
        """
        if project_root is None:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
            current_dir = os.path.dirname(os.path.abspath(__file__))
            self.project_root = os.path.dirname(current_dir)
        else:
            self.project_root = project_root
            
        self.gpio_manager_path = os.path.join(self.project_root, 'services', 'gpio_manager.js')
        self.gpio_example_path = os.path.join(self.project_root, 'services', 'gpio_reset_example.js')
    
    def reset_gpio_pins(self, timeout: int = 30) -> Dict[str, Any]:
        """
        –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç GPIO –ø–∏–Ω—ã –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É—è –Ω–æ–≤—ã–π –∫–ª–∞—Å—Å GPIOReset
        
        Args:
            timeout: –¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è GPIOReset
            test_script = '''
const { GPIOReset } = require('./gpio_manager');

console.log('üöÄ –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ GPIOReset —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π...');
const gpioReset = new GPIOReset();

setTimeout(() => {
    console.log('üìä –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç—É—Å–∞ GPIO:');
    gpioReset.showStatus();
    
    const info = gpioReset.getInfo();
    console.log('üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ GPIO:', JSON.stringify(info, null, 2));
    
    console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...');
    gpioReset.cleanup();
    
    console.log('‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
}, 2000);
'''
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç
            temp_script_path = os.path.join(self.project_root, 'services', 'temp_gpio_test.js')
            with open(temp_script_path, 'w', encoding='utf-8') as f:
                f.write(test_script)
            
            try:
                result = subprocess.run(
                    ['node', temp_script_path],
                    capture_output=True,
                    text=True,
                    timeout=timeout,
                    cwd=os.path.join(self.project_root, 'services')
                )
            finally:
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                if os.path.exists(temp_script_path):
                    os.remove(temp_script_path)
            
            return {
                'success': result.returncode == 0,
                'stdout': result.stdout,
                'stderr': result.stderr,
                'returncode': result.returncode
            }
        except subprocess.TimeoutExpired:
            return {
                'success': False,
                'stdout': '',
                'stderr': f'Timeout after {timeout} seconds',
                'returncode': -1
            }
        except Exception as e:
            return {
                'success': False,
                'stdout': '',
                'stderr': str(e),
                'returncode': -1
            }
    
    def test_gpio_functionality(self, timeout: int = 45) -> Dict[str, Any]:
        """
        –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å GPIO –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞
        
        Args:
            timeout: –¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        try:
            result = subprocess.run(
                ['node', self.gpio_example_path, 'test'],
                capture_output=True,
                text=True,
                timeout=timeout,
                cwd=self.project_root
            )
            
            return {
                'success': result.returncode == 0,
                'stdout': result.stdout,
                'stderr': result.stderr,
                'returncode': result.returncode
            }
        except subprocess.TimeoutExpired:
            return {
                'success': False,
                'stdout': '',
                'stderr': f'Timeout after {timeout} seconds',
                'returncode': -1
            }
        except Exception as e:
            return {
                'success': False,
                'stdout': '',
                'stderr': str(e),
                'returncode': -1
            }
    
    def check_gpio_configuration(self, expected_pins: List[int] = None) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é GPIO –ø–∏–Ω–æ–≤
        
        Args:
            expected_pins: –°–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞–µ–º—ã—Ö –ø–∏–Ω–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
        """
        if expected_pins is None:
            expected_pins = [8, 10, 11, 12, 13, 15]
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        check_script = f"""
const {{ resetSpecificGPIOs, cleanupGPIOs }} = require('./services/gpio_manager');

async function checkConfiguration() {{
    try {{
        const result = resetSpecificGPIOs();
        if (!result.success) {{
            console.error('Failed to reset GPIO pins');
            process.exit(1);
        }}
        
        const configurations = [];
        result.gpioInstances.forEach(gpio => {{
            const info = gpio.getInfo();
            configurations.push({{
                pin: info.pin,
                direction: info.direction,
                state: info.state
            }});
        }});
        
        console.log(JSON.stringify(configurations, null, 2));
        
        // –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
        cleanupGPIOs(result.gpioInstances);
        process.exit(0);
    }} catch (error) {{
        console.error('Error:', error.message);
        process.exit(1);
    }}
}}

checkConfiguration();
"""
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç
        temp_script_path = os.path.join(self.project_root, 'temp_gpio_check.js')
        try:
            with open(temp_script_path, 'w', encoding='utf-8') as f:
                f.write(check_script)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∫—Ä–∏–ø—Ç
            result = subprocess.run(
                ['node', temp_script_path],
                capture_output=True,
                text=True,
                timeout=20,
                cwd=self.project_root
            )
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            if os.path.exists(temp_script_path):
                os.remove(temp_script_path)
            
            if result.returncode == 0:
                try:
                    configurations = json.loads(result.stdout)
                    return {
                        'success': True,
                        'configurations': configurations,
                        'stdout': result.stdout,
                        'stderr': result.stderr
                    }
                except json.JSONDecodeError:
                    return {
                        'success': False,
                        'configurations': [],
                        'stdout': result.stdout,
                        'stderr': f'Failed to parse JSON: {result.stderr}'
                    }
            else:
                return {
                    'success': False,
                    'configurations': [],
                    'stdout': result.stdout,
                    'stderr': result.stderr
                }
                
        except Exception as e:
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω
            if os.path.exists(temp_script_path):
                os.remove(temp_script_path)
            
            return {
                'success': False,
                'configurations': [],
                'stdout': '',
                'stderr': str(e)
            }
    
    def verify_gpio_pin_configuration(self, pin: int, expected_direction: str, expected_state: Optional[int] = None) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ GPIO –ø–∏–Ω–∞
        
        Args:
            pin: –ù–æ–º–µ—Ä GPIO –ø–∏–Ω–∞
            expected_direction: –û–∂–∏–¥–∞–µ–º–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ('in' –∏–ª–∏ 'out')
            expected_state: –û–∂–∏–¥–∞–µ–º–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–¥–ª—è –≤—ã—Ö–æ–¥–Ω—ã—Ö –ø–∏–Ω–æ–≤)
            
        Returns:
            True –µ—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–π
        """
        config_result = self.check_gpio_configuration()
        
        if not config_result['success']:
            return False
        
        for config in config_result['configurations']:
            if config['pin'] == pin:
                if config['direction'] != expected_direction:
                    return False
                
                if expected_state is not None and config['state'] != expected_state:
                    return False
                
                return True
        
        return False
    
    def wait_for_gpio_ready(self, max_wait_time: int = 10) -> bool:
        """
        –û–∂–∏–¥–∞–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ GPIO —Å–∏—Å—Ç–µ–º—ã
        
        Args:
            max_wait_time: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            
        Returns:
            True –µ—Å–ª–∏ —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞
        """
        start_time = time.time()
        
        while time.time() - start_time < max_wait_time:
            try:
                result = self.reset_gpio_pins(timeout=5)
                if result['success']:
                    return True
            except:
                pass
            
            time.sleep(0.5)
        
        return False
    
    def get_gpio_status_summary(self) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è GPIO
        
        Returns:
            –°—Ç—Ä–æ–∫–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è GPIO
        """
        config_result = self.check_gpio_configuration()
        
        if not config_result['success']:
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ GPIO"
        
        summary_lines = ["üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ GPIO –ø–∏–Ω–æ–≤:"]
        
        for config in config_result['configurations']:
            pin = config['pin']
            direction = config['direction'].upper()
            state = config.get('state', 'N/A')
            
            if direction == 'IN':
                summary_lines.append(f"  ‚Ä¢ GPIO {pin}: {direction}")
            else:
                summary_lines.append(f"  ‚Ä¢ GPIO {pin}: {direction} = {state}")
        
        return "\n".join(summary_lines)


# Robot Framework –±–∏–±–ª–∏–æ—Ç–µ–∫–∞
class GPIOLibrary:
    """Robot Framework –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å GPIO"""
    
    ROBOT_LIBRARY_SCOPE = 'GLOBAL'
    
    def __init__(self):
        self.utils = GPIOTestUtils()
    
    def reset_gpio_pins(self, timeout=30):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç GPIO –ø–∏–Ω—ã –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"""
        result = self.utils.reset_gpio_pins(int(timeout))
        if not result['success']:
            raise AssertionError(f"Failed to reset GPIO pins: {result['stderr']}")
        return result['stdout']
    
    def test_gpio_functionality(self, timeout=45):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å GPIO"""
        result = self.utils.test_gpio_functionality(int(timeout))
        if not result['success']:
            raise AssertionError(f"GPIO functionality test failed: {result['stderr']}")
        return result['stdout']
    
    def verify_gpio_pin_configuration(self, pin, direction, state=None):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é GPIO –ø–∏–Ω–∞"""
        pin = int(pin)
        expected_state = int(state) if state is not None else None
        
        if not self.utils.verify_gpio_pin_configuration(pin, direction, expected_state):
            raise AssertionError(f"GPIO {pin} configuration mismatch. Expected: {direction}" + 
                               (f" = {expected_state}" if expected_state is not None else ""))
    
    def wait_for_gpio_ready(self, max_wait_time=10):
        """–û–∂–∏–¥–∞–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ GPIO —Å–∏—Å—Ç–µ–º—ã"""
        if not self.utils.wait_for_gpio_ready(int(max_wait_time)):
            raise AssertionError(f"GPIO system not ready after {max_wait_time} seconds")
    
    def get_gpio_status_summary(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è GPIO"""
        return self.utils.get_gpio_status_summary()
    
    def check_gpio_configuration(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤—Å–µ—Ö GPIO –ø–∏–Ω–æ–≤"""
        result = self.utils.check_gpio_configuration()
        if not result['success']:
            raise AssertionError(f"Failed to check GPIO configuration: {result['stderr']}")
        return result['configurations']


if __name__ == "__main__":
    # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —É—Ç–∏–ª–∏—Ç
    utils = GPIOTestUtils()
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GPIO —É—Ç–∏–ª–∏—Ç...")
    
    # –¢–µ—Å—Ç —Å–±—Ä–æ—Å–∞ GPIO
    print("\n1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–±—Ä–æ—Å–∞ GPIO...")
    reset_result = utils.reset_gpio_pins()
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –£—Å–ø–µ—Ö' if reset_result['success'] else '‚ùå –û—à–∏–±–∫–∞'}")
    if not reset_result['success']:
        print(f"   –û—à–∏–±–∫–∞: {reset_result['stderr']}")
    
    # –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    print("\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ GPIO...")
    config_result = utils.check_gpio_configuration()
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –£—Å–ø–µ—Ö' if config_result['success'] else '‚ùå –û—à–∏–±–∫–∞'}")
    if config_result['success']:
        print("   –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
        for config in config_result['configurations']:
            print(f"     GPIO {config['pin']}: {config['direction']} = {config.get('state', 'N/A')}")
    
    # –°–≤–æ–¥–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    print("\n3. –°–≤–æ–¥–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è GPIO:")
    print(utils.get_gpio_status_summary())
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")