
let sockets = {}; // –ó–∞–º–µ–Ω—è–µ–º 'let socket = null;' –Ω–∞ –æ–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–∫–µ—Ç–æ–≤

import { ref } from 'vue';

// const testStatus = ref(''); // –≠—Ç–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è, –≤–æ–∑–º–æ–∂–Ω–æ, –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞ –∏–ª–∏ —Ç—Ä–µ–±—É–µ—Ç –ø–µ—Ä–µ–æ—Å–º—ã—Å–ª–µ–Ω–∏—è –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–µ—Å—Ç—É

let gpioSocket = null

export function connectGpioWebSocket(callback) {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
    if (gpioSocket) {
        gpioSocket.close()
    }

    console.log('–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ GPIO WebSocket...')
    gpioSocket = new WebSocket('ws://localhost:8001/ws/gpio')

    gpioSocket.onopen = () => {
        console.log('‚úÖ GPIO WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω')
    }

    gpioSocket.onmessage = (event) => {
        try {
            const data = JSON.parse(event.data)

            // –õ–æ–≤–∏–º —Ç–æ–ª—å–∫–æ —Å–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è GPIO
            if (data.type === 'gpio_event') {
                console.log(`üîå GPIO –∏–∑–º–µ–Ω–∏–ª—Å—è: ${data.value}`)
                // –í—ã–∑—ã–≤–∞–µ–º callback —Å –¥–∞–Ω–Ω—ã–º–∏
                if (callback) {
                    callback(data.value)
                }
            }
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:', e)
        }
    }

    gpioSocket.onerror = (error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ WebSocket:', error)
    }

    gpioSocket.onclose = () => {
        console.log('üîå GPIO WebSocket –æ—Ç–∫–ª—é—á–µ–Ω')
    }
}

export function disconnectGpioWebSocket() {
    if (gpioSocket) {
        gpioSocket.close()
        gpioSocket = null
    }
}

export function connectWebSocket(test, dataStore) {
    const tests = dataStore.tests;
    const testId = test.testId;
    console.log(`–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WebSocket –¥–ª—è test_id: ${testId}`);

    // –ï—Å–ª–∏ —Å–æ–∫–µ—Ç –¥–ª—è —ç—Ç–æ–≥–æ testId —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –æ—Ç–∫—Ä—ã—Ç, –∑–∞–∫—Ä–æ–µ–º –µ–≥–æ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ.
    if (sockets[testId] && sockets[testId].readyState === WebSocket.OPEN) {
        console.log(`–ó–∞–∫—Ä—ã—Ç–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ WebSocket –¥–ª—è test_id: ${testId}`);
        sockets[testId].onclose = null; // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ onclose
        sockets[testId].close();
    }

    const wsUrl = `ws://localhost:8001/ws/test-status/${testId}`;
    console.log(`–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WebSocket: ${wsUrl}`);
    const currentSocket = new WebSocket(wsUrl);
    sockets[testId] = currentSocket; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Å–æ–∫–µ—Ç –≤ –æ–±—ä–µ–∫—Ç–µ

    currentSocket.onopen = () => {
        console.log(`WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è test_id: ${testId}`);
        // testStatus.value = `–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è ${testId} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ...`; // –ú–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å UI —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∞
    };

    currentSocket.onmessage = (event) => {
        try {
            console.log(`onmessage –¥–ª—è ${testId}:`, event.data); // testId –∑–¥–µ—Å—å –∏–∑ –∑–∞–º—ã–∫–∞–Ω–∏—è, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–∫–µ—Ç–∞
            const eventData = JSON.parse(event.data);
            const data = {
                testId: eventData.test_id, // –≠—Ç–æ test_id –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
                status: eventData.status,
                timeStart: eventData.time_start,
                updatedAt: eventData.updated_at,
                timeEnd: eventData.time_end,
                result: eventData.result,
            };

            console.log("data from message: ", data);

            // –ù–∞—Ö–æ–¥–∏–º —Ç–µ—Å—Ç –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ, –∏—Å–ø–æ–ª—å–∑—É—è testId –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            const testToUpdate = tests.find(t => t.testId === data.testId);

            if (testToUpdate) {
                // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ testId –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å testId, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –±—ã–ª –æ—Ç–∫—Ä—ã—Ç —ç—Ç–æ—Ç —Å–æ–∫–µ—Ç.
                // –≠—Ç–æ –≤–∞–∂–Ω–æ, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –º–æ–≥—É—Ç –±—ã—Ç—å –æ—à–∏–±–æ—á–Ω–æ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω—ã,
                // –∏–ª–∏ –µ—Å–ª–∏ –æ–¥–∏–Ω —Å–æ–∫–µ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö test_id (—á—Ç–æ –∑–¥–µ—Å—å –Ω–µ —Ç–∞–∫).
                if (data.testId === testId) { // testId –∑–¥–µ—Å—å - —ç—Ç–æ testId, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –±—ã–ª —Å–æ–∑–¥–∞–Ω currentSocket
                    testToUpdate.status = data.status;
                    testToUpdate.timeStart = data.timeStart;
                    testToUpdate.updatedAt = data.updatedAt;
                    testToUpdate.timeEnd = data.timeEnd;
                    testToUpdate.result = data.result;
                    console.log(`–°—Ç–∞—Ç—É—Å —Ç–µ—Å—Ç–∞ ${data.testId} –æ–±–Ω–æ–≤–ª–µ–Ω: ${data.status}`);
                } else {
                    console.warn(`–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è test_id ${data.testId} –Ω–∞ —Å–æ–∫–µ—Ç–µ –¥–ª—è ${testId}. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ, —Ç–∞–∫ –∫–∞–∫ testId –Ω–µ —Å–æ–≤–ø–∞–ª–∏.`);
                }
                console.log("dataStore.tests after update: ", tests); // –î–æ–±–∞–≤–∏–º —ç—Ç—É —Å—Ç—Ä–æ–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            } else {
                console.warn(`–¢–µ—Å—Ç —Å testId ${data.testId} (–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è) –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ dataStore.tests.`);
            }

        } catch (e) {
            console.error(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –∏–∑ WebSocket –¥–ª—è ${testId}:`, e, event.data);
        }
    };

    currentSocket.onerror = (error) => {
        console.error(`–û—à–∏–±–∫–∞ WebSocket –¥–ª—è ${testId}:`, error);
        const testToUpdate = tests.find(t => t.testId === testId);
        if (testToUpdate) {
            // –ú–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–µ—Å—Ç–∞ –≤ dataStore, —á—Ç–æ–±—ã –æ—Ç—Ä–∞–∑–∏—Ç—å –æ—à–∏–±–∫—É WebSocket
            // testToUpdate.status = 'error_ws'; // –ù–∞–ø—Ä–∏–º–µ—Ä
        }
    };

    currentSocket.onclose = (event) => {
        console.log(`WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è ${testId} –∑–∞–∫—Ä—ã—Ç–æ:`, event.reason, event.code);
        // testStatus.value = `–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ WebSocket –¥–ª—è ${testId} –∑–∞–∫—Ä—ã—Ç–æ`;
        // –£–¥–∞–ª—è–µ–º —Å–æ–∫–µ—Ç –∏–∑ –Ω–∞—à–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ —Ç–æ—Ç —Å–∞–º—ã–π —Å–æ–∫–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –º—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º
        if (sockets[testId] === currentSocket) {
            delete sockets[testId];
        }
    };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
export function disconnectWebSocket(testId) {
    if (sockets[testId]) {
        console.log(`–ó–∞–∫—Ä—ã—Ç–∏–µ WebSocket –¥–ª—è test_id: ${testId} –ø–æ –∑–∞–ø—Ä–æ—Å—É.`);
        sockets[testId].close();
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ onclose —Å–∞–º —É–¥–∞–ª–∏—Ç –µ–≥–æ –∏–∑ –æ–±—ä–µ–∫—Ç–∞ sockets
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –≤—Å–µ—Ö WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
export function disconnectAllWebSockets() {
    console.log("–ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π.");
    for (const id in sockets) {
        if (sockets[id]) {
            sockets[id].onclose = null; // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ª–æ–≥–∏ –∏ –ø–æ–ø—ã—Ç–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
            sockets[id].close();
        }
    }
    sockets = {}; // –û—á–∏—â–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é
}