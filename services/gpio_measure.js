const Gpio = require('onoff').Gpio;

class GPIOMeasure {
    constructor(gpioNumber) {
        this.gpioNumber = gpioNumber;
        this.gpio = null;
        this.isInitialized = false;
        this.currentDirection = null;
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GPIO —Å –∑–∞–¥–∞–Ω–Ω—ã–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º
     * @param {string} direction - 'in' –∏–ª–∏ 'out'
     */
    initialize(direction = 'out') {
        try {
            if (this.isInitialized) {
                this.cleanup();
            }

            this.validateGpioNumber();
            this.validateDirection(direction);

            this.gpio = new Gpio(this.gpioNumber, direction);
            this.currentDirection = direction;
            this.isInitialized = true;

            console.log(`‚úÖ GPIO ${this.gpioNumber} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ ${direction}`);
            return true;
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ GPIO ${this.gpioNumber}:`, error.message);
            return false;
        }
    }

    /**
     * –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è GPIO (HIGH/LOW)
     * @param {number|boolean} state - 1/true –¥–ª—è HIGH, 0/false –¥–ª—è LOW
     */
    setState(state) {
        try {
            if (!this.isInitialized || this.currentDirection !== 'out') {
                if (!this.initialize('out')) {
                    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å GPIO –¥–ª—è –∑–∞–ø–∏—Å–∏');
                }
            }

            const normalizedState = this.normalizeState(state);
            this.gpio.writeSync(normalizedState);
            
            const stateText = normalizedState === 1 ? 'HIGH' : 'LOW';
            console.log(`üîÑ GPIO ${this.gpioNumber} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${stateText}`);
            
            return true;
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è GPIO ${this.gpioNumber}:`, error.message);
            return false;
        }
    }

    /**
     * –ß—Ç–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è GPIO
     * @returns {number|null} - 1 –¥–ª—è HIGH, 0 –¥–ª—è LOW, null –ø—Ä–∏ –æ—à–∏–±–∫–µ
     */
    getState() {
        try {
            if (!this.isInitialized || this.currentDirection !== 'in') {
                if (!this.initialize('in')) {
                    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å GPIO –¥–ª—è —á—Ç–µ–Ω–∏—è');
                }
            }

            const state = this.gpio.readSync();
            const stateText = state === 1 ? 'HIGH' : 'LOW';
            console.log(`üìñ GPIO ${this.gpioNumber} —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${stateText}`);
            
            return state;
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è GPIO ${this.gpioNumber}:`, error.message);
            return null;
        }
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è GPIO (toggle)
     */
    toggleState() {
        try {
            const currentState = this.getState();
            if (currentState === null) {
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
            }

            const newState = currentState === 1 ? 0 : 1;
            return this.setState(newState);
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è GPIO ${this.gpioNumber}:`, error.message);
            return false;
        }
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ HIGH —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    setHigh() {
        return this.setState(1);
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ LOW —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    setLow() {
        return this.setState(0);
    }

    /**
     * –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ GPIO —Ä–µ—Å—É—Ä—Å–æ–≤
     */
    cleanup() {
        try {
            if (this.gpio && this.isInitialized) {
                this.gpio.unexport();
                console.log(`üßπ GPIO ${this.gpioNumber} —Ä–µ—Å—É—Ä—Å—ã –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã`);
            }
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–∏ GPIO ${this.gpioNumber}:`, error.message);
        } finally {
            this.gpio = null;
            this.isInitialized = false;
            this.currentDirection = null;
        }
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ GPIO
     */
    validateGpioNumber() {
        if (typeof this.gpioNumber !== 'number' || this.gpioNumber < 0) {
            throw new Error(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä GPIO: ${this.gpioNumber}`);
        }
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è GPIO
     */
    validateDirection(direction) {
        if (!['in', 'out'].includes(direction)) {
            throw new Error(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ GPIO: ${direction}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'in' –∏–ª–∏ 'out'`);
        }
    }

    /**
     * –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫ —á–∏—Å–ª–æ–≤–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é
     */
    normalizeState(state) {
        if (typeof state === 'boolean') {
            return state ? 1 : 0;
        }
        if (typeof state === 'number') {
            return state > 0 ? 1 : 0;
        }
        if (typeof state === 'string') {
            const lowerState = state.toLowerCase();
            if (['high', '1', 'true', 'on'].includes(lowerState)) {
                return 1;
            }
            if (['low', '0', 'false', 'off'].includes(lowerState)) {
                return 0;
            }
        }
        throw new Error(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${state}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 1/0, true/false, 'high'/'low'`);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ GPIO
     */
    getInfo() {
        return {
            gpioNumber: this.gpioNumber,
            isInitialized: this.isInitialized,
            direction: this.currentDirection,
            currentState: this.isInitialized && this.currentDirection === 'in' ? this.getState() : null
        };
    }
}

// –£—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
GPIOMeasure.prototype.gpioChangeState = function(state) {
    console.warn('‚ö†Ô∏è  –ú–µ—Ç–æ–¥ gpioChangeState —É—Å—Ç–∞—Ä–µ–ª. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ setState()');
    return this.setState(state);
};

module.exports = GPIOMeasure;
