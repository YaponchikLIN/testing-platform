# WebSocket-—ç–Ω–¥–ø–æ–∏–Ω—Ç
from fastapi import WebSocket, APIRouter, WebSocketDisconnect
from typing import Dict
from api_service.app.config import connected_clients, ConnectedClients
from db.db_tests import tests_db
import importlib.util
import os
from typing import List
import json

# –ó–∞–≥—Ä—É–∂–∞–µ–º types –º–æ–¥—É–ª—å –Ω–∞–ø—Ä—è–º—É—é
types_path = os.path.join(os.path.dirname(__file__), "types.py")
spec = importlib.util.spec_from_file_location("websocket_types", types_path)
types_module = importlib.util.module_from_spec(spec)
spec.loader.exec_module(types_module)
TestsDatabase = types_module.TestsDatabase

router = APIRouter()


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
async def _subscribe_and_send_initial_status(
    websocket: WebSocket,
    current_test_id: str,
    tests_db_ref: TestsDatabase,
    connected_clients_ref: ConnectedClients,
):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç WebSocket –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ test_id –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å.
    """
    print(f"–ü–æ–¥–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ test_id: {current_test_id}")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
    if current_test_id not in connected_clients_ref:
        connected_clients_ref[current_test_id] = []

    # –ò–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –æ–¥–Ω–æ–≥–æ –∏ —Ç–æ–≥–æ –∂–µ websocket –≤ —Å–ø–∏—Å–∫–µ –¥–ª—è –æ–¥–Ω–æ–≥–æ test_id
    if websocket not in connected_clients_ref[current_test_id]:
        connected_clients_ref[current_test_id].append(websocket)

    print(f"connected_clients_ref: {connected_clients_ref}")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
    print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è test_id: {current_test_id}")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
    if current_test_id in tests_db_ref:
        print("current_test_id: ", current_test_id)
        # print("tests_db_ref: ", tests_db_ref)
        print("tests_db_ref[current_test_id]: ", tests_db_ref[current_test_id])
        await websocket.send_json(
            {
                "test_id": current_test_id,
                "status": tests_db_ref[current_test_id]["status"],
                "time_start": tests_db_ref[current_test_id]["time_start"],
                "updated_at": tests_db_ref[current_test_id]["updated_at"],
                "time_end": tests_db_ref[current_test_id]["time_end"],
                "result": tests_db_ref[current_test_id]["result"],
            }
        )
    else:
        await websocket.send_json(
            {
                "test_id": current_test_id,
                "status": "pending_initiation",
                "time_start": None,
                "updated_at": None,
                "time_end": None,
                "result": None,
            }
        )


gpio_connections: List[WebSocket] = []


@router.websocket("/ws/gpio")
async def gpio_websocket_endpoint(websocket: WebSocket):
    """
    WebSocket –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π GPIO –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    """
    await websocket.accept()
    gpio_connections.append(websocket)

    print(
        f"‚úÖ –ù–æ–≤–æ–µ GPIO WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ. –í—Å–µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {len(gpio_connections)}"
    )

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        await websocket.send_json(
            {
                "type": "connection_established",
                "message": "–ü–æ–¥–∫–ª—é—á–µ–Ω –∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É GPIO",
                "connections_count": len(gpio_connections),
            }
        )

        # –î–µ—Ä–∂–∏–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã–º
        while True:
            data = await websocket.receive_text()
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ping)
            if data == "ping":
                await websocket.send_json({"type": "pong", "timestamp": "..."})

    except WebSocketDisconnect:
        gpio_connections.remove(websocket)
        print(
            f"üîå GPIO WebSocket –æ—Ç–∫–ª—é—á–µ–Ω. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {len(gpio_connections)}"
        )

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ GPIO WebSocket: {e}")
        if websocket in gpio_connections:
            gpio_connections.remove(websocket)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ GPIO —Å–æ–±—ã—Ç–∏–π –∏–∑ –ª–æ–≥–æ–≤ Node.js
async def parse_and_broadcast_gpio_event(log_line: str):
    """
    –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –ª–æ–≥–∞ Node.js –∏ —Ä–∞—Å—Å—ã–ª–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ WebSocket
    """
    try:
        # –ü–∞—Ä—Å–∏–º —Å–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è GPIO
        if "–°–æ–±—ã—Ç–∏–µ:" in log_line and "GPIO:" in log_line:
            parts = log_line.split("|")
            if len(parts) >= 3:
                event_part = parts[0].strip()
                value_part = parts[1].strip()
                time_part = parts[2].strip() if len(parts) > 2 else ""

                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è –∏ –∑–Ω–∞—á–µ–Ω–∏–µ
                event_type = "üîº –ü–û–î–™–ï–ú" if "üîº" in event_part else "üîΩ –°–ü–ê–î"
                value = int(value_part.replace("GPIO:", "").strip())

                event_data = {
                    "type": "gpio_event",
                    "event": "rising" if "üîº" in event_type else "falling",
                    "value": value,
                    "event_display": event_type,
                    "timestamp": time_part.replace("–í—Ä–µ–º—è:", "").strip(),
                    "raw_message": log_line.strip(),
                }

                await broadcast_gpio_event(event_data)
                return

        # –ü–∞—Ä—Å–∏–º –æ—à–∏–±–∫–∏
        elif "‚ùå –û—à–∏–±–∫–∞:" in log_line:
            error_data = {
                "type": "error",
                "message": log_line.replace("‚ùå –û—à–∏–±–∫–∞:", "").strip(),
                "raw_message": log_line.strip(),
            }
            await broadcast_gpio_event(error_data)
            return

        # –õ–æ–≥–∏—Ä—É–µ–º –¥—Ä—É–≥–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        elif "‚úÖ" in log_line or "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è" in log_line:
            print(f"[GPIO Monitor] {log_line.strip()}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ GPIO –ª–æ–≥–∞: {e}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ GPIO —Å–æ–±—ã—Ç–∏–π –∏–∑ –ª–æ–≥–æ–≤ Node.js
async def parse_and_broadcast_gpio_event(log_line: str):
    """
    –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –ª–æ–≥–∞ Node.js –∏ —Ä–∞—Å—Å—ã–ª–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ WebSocket
    """
    try:
        # –ü–∞—Ä—Å–∏–º —Å–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è GPIO
        if "–°–æ–±—ã—Ç–∏–µ:" in log_line and "GPIO:" in log_line:
            parts = log_line.split("|")
            if len(parts) >= 3:
                event_part = parts[0].strip()
                value_part = parts[1].strip()
                time_part = parts[2].strip() if len(parts) > 2 else ""

                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è –∏ –∑–Ω–∞—á–µ–Ω–∏–µ
                event_type = "üîº –ü–û–î–™–ï–ú" if "üîº" in event_part else "üîΩ –°–ü–ê–î"
                value = int(value_part.replace("GPIO:", "").strip())

                event_data = {
                    "type": "gpio_event",
                    "event": "rising" if "üîº" in event_type else "falling",
                    "value": value,
                    "event_display": event_type,
                    "timestamp": time_part.replace("–í—Ä–µ–º—è:", "").strip(),
                    "raw_message": log_line.strip(),
                }

                await broadcast_gpio_event(event_data)
                return

        # –ü–∞—Ä—Å–∏–º –æ—à–∏–±–∫–∏
        elif "‚ùå –û—à–∏–±–∫–∞:" in log_line:
            error_data = {
                "type": "error",
                "message": log_line.replace("‚ùå –û—à–∏–±–∫–∞:", "").strip(),
                "raw_message": log_line.strip(),
            }
            await broadcast_gpio_event(error_data)
            return

        # –õ–æ–≥–∏—Ä—É–µ–º –¥—Ä—É–≥–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        elif "‚úÖ" in log_line or "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è" in log_line:
            print(f"[GPIO Monitor] {log_line.strip()}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ GPIO –ª–æ–≥–∞: {e}")


@router.websocket("/ws/test-status/{test_id}")
async def websocket_endpoint(
    websocket: WebSocket, test_id: str
):  # 'test_id' –∑–¥–µ—Å—å - —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ URL
    print("websocket_endpoint")
    print(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket –¥–ª—è test_id –∏–∑ URL: {test_id}")
    await websocket.accept()

    # –°–ø–∏—Å–æ–∫ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö test_id, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —ç—Ç–æ—Ç WebSocket –±—ã–ª –ø–æ–¥–ø–∏—Å–∞–Ω.
    # –í–∞–∂–Ω–æ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ—Ç–ø–∏—Å–∫–∏.
    subscribed_ids_for_this_connection = []

    try:
        if test_id == "all":
            # –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —Ö–æ—á–µ—Ç –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—Å–µ —Ç–µ—Å—Ç—ã
            print("–ö–ª–∏–µ–Ω—Ç –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –≤—Å–µ —Ç–µ—Å—Ç—ã.")
            for (
                actual_db_test_id
            ) in tests_db.keys():  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥—Ä—É–≥–æ–µ –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–ª—è –∏—Ç–µ—Ä–∞—Ü–∏–∏
                await _subscribe_and_send_initial_status(
                    websocket, actual_db_test_id, tests_db, connected_clients
                )
                subscribed_ids_for_this_connection.append(actual_db_test_id)
        else:
            # –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —Ö–æ—á–µ—Ç –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–µ—Å—Ç
            print(f"–ö–ª–∏–µ–Ω—Ç –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π test_id: {test_id}")
            await _subscribe_and_send_initial_status(
                websocket,
                test_id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º test_id –∏–∑ URL
                tests_db,
                connected_clients,
            )
            subscribed_ids_for_this_connection.append(test_id)

        # –î–µ—Ä–∂–∏–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        while True:
            await websocket.receive_text()  # –û–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ (–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ asyncio.sleep(1) –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç—ã —Ç–æ–ª—å–∫–æ —Å–ª—É—à–∞—é—Ç)
            # –ù–∞–ø—Ä–∏–º–µ—Ä, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É ping –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            # data = await websocket.receive_text()
            # if data == "ping":
            #     await websocket.send_text("pong")

    except WebSocketDisconnect:
        exception_websocket_disconnect_endpoint(
            e, websocket, "test_id", test_id, subscribed_ids_for_this_connection
        )

    except Exception as e:
        exception_websocket_endpoint(e, websocket)


async def exception_websocket_endpoint(exception: Exception, websocket: WebSocket):
    print(f"–û—à–∏–±–∫–∞ –≤ WebSocket: {exception}")
    if not websocket.client_state.DISCONNECTED:
        await websocket.close(code=1008, reason=str(exception))


async def exception_websocket_disconnect_endpoint(
    exception: Exception,
    websocket: WebSocket,
    type_ws_id: str,
    subscribed_id: str,
    subscribed_ids_for_this_connection: list,
):
    print(
        f"–ö–ª–∏–µ–Ω—Ç –æ—Ç—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è (–∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –±—ã–ª –¥–ª—è {type_ws_id}: {subscribed_id} ). –û—á–∏—Å—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫..."
    )
    for subscribed_id in subscribed_ids_for_this_connection:
        if (subscribed_id in connected_clients) and (
            websocket in connected_clients[subscribed_id]
        ):
            connected_clients[subscribed_id].remove(websocket)
            if not connected_clients[subscribed_id]:
                del connected_clients[subscribed_id]
                print(
                    f"–£–¥–∞–ª–µ–Ω –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è {type_ws_id}: {subscribed_id}"
                )
    print(
        f"–ü–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –æ—Ç—Å–æ–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ (–∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å: '{type_ws_id}: {subscribed_id}') –æ—á–∏—â–µ–Ω—ã."
    )


async def broadcast_gpio_event(event_data: dict):
    """
    –†–∞—Å—Å—ã–ª–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ GPIO –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º WebSocket –∫–ª–∏–µ–Ω—Ç–∞–º
    """
    if not gpio_connections:
        return

    message = json.dumps(event_data, ensure_ascii=False)
    disconnected_connections = []

    for connection in gpio_connections:
        try:
            await connection.send_text(message)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ GPIO —Å–æ–±—ã—Ç–∏—è: {e}")
            disconnected_connections.append(connection)

    # –£–¥–∞–ª—è–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    for connection in disconnected_connections:
        if connection in gpio_connections:
            gpio_connections.remove(connection)

    if disconnected_connections:
        print(
            f"üîå –£–¥–∞–ª–µ–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö GPIO —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {len(disconnected_connections)}"
        )
