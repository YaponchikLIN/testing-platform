const { GPIOReset } = require('./gpio_manager');

/**
 * –ó–∞–≥–ª—É—à–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤–æ–ª—å—Ç–∞–∂–∞
 * –í –±—É–¥—É—â–µ–º –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω–∞ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É uni-t ut803
 * @returns {Promise<boolean>} –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑–º–µ—Ä–µ–Ω–∏—è (–≤—Å–µ–≥–¥–∞ true –¥–ª—è –∑–∞–≥–ª—É—à–∫–∏)
 */
async function measureVoltage() {
    console.log('üî¨ –ù–∞—á–∏–Ω–∞–µ–º –∏–∑–º–µ—Ä–µ–Ω–∏–µ –≤–æ–ª—å—Ç–∞–∂–∞...');
    console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥ (–∑–∞–≥–ª—É—à–∫–∞)...');

    // –ó–∞–≥–ª—É—à–∫–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º 5 —Å–µ–∫—É–Ω–¥
    await sleep(5000);

    console.log('‚úÖ –ò–∑–º–µ—Ä–µ–Ω–∏–µ –≤–æ–ª—å—Ç–∞–∂–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ (–∑–∞–≥–ª—É—à–∫–∞)');
    return true;
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è GPIO
 * –î–ª—è –∫–∞–∂–¥–æ–≥–æ outputPin –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ü–∏–∫–ª: —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤ 1 -> –∏–∑–º–µ—Ä–µ–Ω–∏–µ –≤–æ–ª—å—Ç–∞–∂–∞ -> —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤ 0
 * @returns {Promise<boolean>} –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
 */
async function runGPIOTest() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ GPIO —Ç–µ—Å—Ç–∞');
    console.log('====================');

    try {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º GPIOReset
        console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GPIO —Å–∏—Å—Ç–µ–º—ã...');
        const gpioReset = new GPIOReset();

        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã—Ö–æ–¥–Ω—ã—Ö –ø–∏–Ω–æ–≤
        const outputPins = gpioReset.outputPins; // [32, 36, 97, 39, 40]
        console.log(`üìå –í—ã—Ö–æ–¥–Ω—ã–µ –ø–∏–Ω—ã: ${outputPins.join(', ')}`);
        console.log(`üîÑ –ë—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —Ü–∏–∫–ª –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∏–Ω–∞: 1 -> –∏–∑–º–µ—Ä–µ–Ω–∏–µ -> 0`);

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –ø–∏–Ω –ø–æ –æ—á–µ—Ä–µ–¥–∏
        for (let i = 0; i < outputPins.length; i++) {
            const pin = outputPins[i];
            console.log(`\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GPIO ${pin} (${i + 1}/${outputPins.length})`);
            console.log('‚îÄ'.repeat(40));

            // 1. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∏–Ω–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ 1
            console.log(`  üì§ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ GPIO ${pin} –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ 1`);
            const setHighResult = gpioReset.setOutputPin(pin, 1);
            
            if (!setHighResult) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ GPIO ${pin} –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ 1`);
                return false;
            }
            
            console.log(`  ‚úÖ GPIO ${pin} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ 1`);
            
            // 2. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤–æ–ª—å—Ç–∞–∂–∞
            console.log(`  üî¨ –ò–∑–º–µ—Ä–µ–Ω–∏–µ –≤–æ–ª—å—Ç–∞–∂–∞ –¥–ª—è GPIO ${pin}...`);
            const measurementResult = await measureVoltage();
            
            if (!measurementResult) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ—Ä–µ–Ω–∏–∏ –≤–æ–ª—å—Ç–∞–∂–∞ –¥–ª—è GPIO ${pin}`);
                return false;
            }
            
            console.log(`  ‚úÖ –ò–∑–º–µ—Ä–µ–Ω–∏–µ –¥–ª—è GPIO ${pin} –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ`);
            
            // 3. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∏–Ω–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ 0
            console.log(`  üì• –£—Å—Ç–∞–Ω–æ–≤–∫–∞ GPIO ${pin} –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ 0`);
            const setLowResult = gpioReset.setOutputPin(pin, 0);
            
            if (!setLowResult) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ GPIO ${pin} –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ 0`);
                return false;
            }
            
            console.log(`  ‚úÖ GPIO ${pin} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ 0`);
            console.log(`  üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GPIO ${pin} –∑–∞–≤–µ—Ä—à–µ–Ω–æ`);
        }

        console.log('\nüéâ –í—Å–µ GPIO –ø–∏–Ω—ã –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
        console.log('‚úÖ GPIO —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
        return true;

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ GPIO —Ç–µ—Å—Ç–µ:', error.message);
        return false;
    }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
 * @param {number} ms –í—Ä–µ–º—è –∑–∞–¥–µ—Ä–∂–∫–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
 * @returns {Promise<void>}
 */
function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
 */
process.on('SIGINT', () => {
    console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ—Å—Ç–∞...');
    process.exit(0);
});

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞, –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    console.log('üéØ –ó–∞–ø—É—Å–∫ GPIO —Ç–µ—Å—Ç–∞...');
    runGPIOTest()
        .then(result => {
            if (result) {
                console.log('üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
                process.exit(0);
            } else {
                console.log('‚ùå –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π!');
                process.exit(1);
            }
        })
        .catch(error => {
            console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
            process.exit(1);
        });
}

module.exports = {
    runGPIOTest,
    measureVoltage
};