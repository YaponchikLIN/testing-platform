const Gpio = require('onoff').Gpio;
const GPIOMeasure = require('./gpio_measure');


class GPIOMonitor {
    constructor(gpioNumber) {
        this.gpioNumber = gpioNumber;
        this.gpio = null;
        this.lastValue = null;
        this.isMonitoring = false;
    }

    start() {
        try {
            console.log(`–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GPIO: ${this.gpioNumber}`);

            this.gpio = new Gpio(this.gpioNumber, 'in', 'both');
            this.lastValue = this.gpio.readSync();

            console.log(`‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω –Ω–∞ GPIO ${this.gpioNumber}`);
            console.log(`–ù–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ${this.lastValue}`);
            console.log('–û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π... (Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)');

            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π
            this.gpio.watch((err, value) => {
                if (err) {
                    console.error('‚ùå –û—à–∏–±–∫–∞:', err);
                    return;
                }

                if (value !== this.lastValue) {
                    const eventType = value === 1 ? 'üîº –ü–û–î–™–ï–ú' : 'üîΩ –°–ü–ê–î';
                    console.log(`–°–æ–±—ã—Ç–∏–µ: ${eventType} | GPIO: ${value} | –í—Ä–µ–º—è: ${new Date().toLocaleTimeString()}`);
                    this.lastValue = value;
                }
            });

            this.isMonitoring = true;

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error.message);
        }
    }

    stop() {
        console.log('\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...');
        if (this.gpio) {
            this.gpio.unwatchAll();
            this.gpio.unexport();
        }
    }
}

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —Å–±—Ä–æ—Å–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö GPIO –ø–∏–Ω–æ–≤
 * GPIO 8 - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –∫–∞–∫ INPUT
 * GPIO 10, 11, 12, 13, 15 - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è –∫–∞–∫ OUTPUT —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º 0
 */
class GPIOReset {
    constructor() {
        this.gpioInstances = [];
        this.isInitialized = false;
        this.inputPin = 33;
        this.outputPins = [32, 36, 97, 39, 40];

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
        this.initialize();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö GPIO –ø–∏–Ω–æ–≤
     * @returns {Object} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
     */
    initialize() {
        // –ï—Å–ª–∏ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if (this.isInitialized) {
            console.log('‚ÑπÔ∏è GPIO Reset —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            return {
                success: true,
                message: 'GPIO –ø–∏–Ω—ã —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã',
                gpioInstances: this.gpioInstances
            };
        }

        try {
            console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–±—Ä–æ—Å GPIO –ø–∏–Ω–æ–≤...');

            // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            this.cleanup();

            // GPIO 8 - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–∫ INPUT
            console.log(`üì• –ù–∞—Å—Ç—Ä–æ–π–∫–∞ GPIO ${this.inputPin} –∫–∞–∫ INPUT...`);
            const gpio8 = new GPIOMeasure(this.inputPin);
            gpio8.initialize('in');
            this.gpioInstances.push(gpio8);
            console.log(`‚úÖ GPIO ${this.inputPin} –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–∞–∫ INPUT`);

            // GPIO 32, 36, 97, 39, 40 - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–∫ OUTPUT —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º 0
            for (const pin of this.outputPins) {
                console.log(`üì§ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ GPIO ${pin} –∫–∞–∫ OUTPUT –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ 0...`);
                const gpio = new GPIOMeasure(pin);
                gpio.initialize('out');
                gpio.setState(0);
                this.gpioInstances.push(gpio);
                console.log(`‚úÖ GPIO ${pin} –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–∞–∫ OUTPUT –∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ 0`);
            }

            this.isInitialized = true;
            console.log('üéâ –í—Å–µ GPIO –ø–∏–Ω—ã —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!');

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            this.showStatus();

            return {
                success: true,
                message: 'GPIO –ø–∏–Ω—ã —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã',
                gpioInstances: this.gpioInstances
            };

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ GPIO:', error.message);

            // –û—á–∏—â–∞–µ–º —á–∞—Å—Ç–∏—á–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            this.cleanup();

            return {
                success: false,
                message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ GPIO: ${error.message}`,
                gpioInstances: []
            };
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö GPIO –ø–∏–Ω–æ–≤
     */
    showStatus() {
        console.log('\nüìã –ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ GPIO:');
        console.log(`GPIO ${this.inputPin}: INPUT`);
        this.outputPins.forEach(pin => {
            console.log(`GPIO ${pin}: OUTPUT, —Å–æ—Å—Ç–æ—è–Ω–∏–µ: 0`);
        });
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö GPIO
     * @returns {Object} –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ GPIO
     */
    getInfo() {
        return {
            isInitialized: this.isInitialized,
            inputPin: this.inputPin,
            outputPins: this.outputPins,
            totalPins: this.gpioInstances.length,
            gpioInstances: this.gpioInstances
        };
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Ö–æ–¥–Ω–æ–≥–æ –ø–∏–Ω–∞ (GPIO 8)
     * @returns {number|null} –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∏–Ω–∞ –∏–ª–∏ null –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
     */
    readInputPin() {
        if (!this.isInitialized) {
            console.warn('‚ö†Ô∏è GPIO –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã. –í—ã–∑–æ–≤–∏—Ç–µ initialize() —Å–Ω–∞—á–∞–ª–∞.');
            return null;
        }

        try {
            const inputGpio = this.gpioInstances.find(gpio => gpio.pin === this.inputPin);
            if (inputGpio) {
                const state = inputGpio.getState();
                console.log(`üìñ GPIO ${this.inputPin} (INPUT): ${state}`);
                return state;
            }
            return null;
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è GPIO ${this.inputPin}:`, error.message);
            return null;
        }
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –ø–∏–Ω–∞
     * @param {number} pin - –ù–æ–º–µ—Ä –ø–∏–Ω–∞
     * @param {number} state - –°–æ—Å—Ç–æ—è–Ω–∏–µ (0 –∏–ª–∏ 1)
     * @returns {boolean} –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
     */
    setOutputPin(pin, state) {
        try {
            if (!this.isInitialized) {
                console.warn('‚ö†Ô∏è GPIO –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã. –í—ã–∑–æ–≤–∏—Ç–µ initialize() —Å–Ω–∞—á–∞–ª–∞.');
                return false;
            }

            if (!this.outputPins.includes(pin)) {
                console.error(`‚ùå –ü–∏–Ω ${pin} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤—ã—Ö–æ–¥–Ω—ã–º –ø–∏–Ω–æ–º`);
                return false;
            }


            const outputGpio = this.gpioInstances.find(gpio => gpio.pin === pin);
            if (outputGpio) {
                outputGpio.setState(state);
                console.log(`üìù GPIO ${pin} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${state}`);
                return true;
            }
            return false;
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ GPIO ${pin}:`, error.message);
            return false;
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö GPIO —Ä–µ—Å—É—Ä—Å–æ–≤
     */
    cleanup() {
        console.log('üßπ –û—á–∏—Å—Ç–∫–∞ GPIO —Ä–µ—Å—É—Ä—Å–æ–≤...');

        for (const gpio of this.gpioInstances) {
            try {
                if (gpio && typeof gpio.cleanup === 'function') {
                    gpio.cleanup();
                }
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ GPIO ${gpio.pin}:`, error.message);
            }
        }

        this.gpioInstances = [];
        this.isInitialized = false;
        console.log('‚úÖ –û—á–∏—Å—Ç–∫–∞ GPIO –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è
console.log('üöÄ –ó–∞–ø—É—Å–∫ GPIO —Å–∏—Å—Ç–µ–º—ã...');

// 1. –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ GPIO 33
const monitor = new GPIOMonitor(33);
monitor.start();

// 2. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±—Ä–æ—Å GPIO
console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GPIO —Å–±—Ä–æ—Å–∞...');
const gpioReset = new GPIOReset();

// –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
setTimeout(() => {
    console.log('üìä –°—Ç–∞—Ç—É—Å GPIO —Å–∏—Å—Ç–µ–º—ã:');
    gpioReset.showStatus();
}, 1000);

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç–∫–∑–µ–º–ø–ª—è—Ä—É —Å–±—Ä–æ—Å–∞
global.gpioResetInstance = gpioReset;

process.on('SIGINT', () => {
    console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ GPIO —Å–∏—Å—Ç–µ–º—ã...');
    monitor.stop();
    if (gpioReset) {
        gpioReset.cleanup();
    }
    process.exit();
});

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
module.exports = {
    GPIOMonitor,
    GPIOReset
};