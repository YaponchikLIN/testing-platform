const GPIOMeasure = require('./gpio_measure');

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–ª–∞—Å—Å–∞ GPIOMeasure –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è GPIO

async function demonstrateGPIOControl() {
    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è GPIO –ø–∏–Ω–∞ 33
    const gpio = new GPIOMeasure(33);

    try {
        console.log('üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è GPIO');
        console.log('================================');

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ GPIO
        console.log('\nüìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ GPIO:');
        console.log(gpio.getInfo());

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º HIGH —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        console.log('\nüîº –£—Å—Ç–∞–Ω–æ–≤–∫–∞ HIGH —Å–æ—Å—Ç–æ—è–Ω–∏—è...');
        gpio.setHigh();
        await sleep(1000);

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º LOW —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        console.log('\nüîΩ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ LOW —Å–æ—Å—Ç–æ—è–Ω–∏—è...');
        gpio.setLow();
        await sleep(1000);

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º setState —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏
        console.log('\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è...');

        gpio.setState(1);       // number
        await sleep(500);

        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è (toggle)
        console.log('\nüîÄ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è...');
        for (let i = 0; i < 3; i++) {
            gpio.toggleState();
            await sleep(500);
        }

        // –ß—Ç–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–∫ input)
        console.log('\nüìñ –ß—Ç–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è...');
        const currentState = gpio.getState();
        console.log(`–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${currentState}`);

        // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        console.log('\nüìã –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ GPIO:');
        console.log(gpio.getInfo());

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏:', error.message);
    } finally {
        // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
        console.log('\nüßπ –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤...');
        gpio.cleanup();
    }
}

// –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ GPIO –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
async function demonstrateMultipleGPIO() {
    const gpio1 = new GPIOMeasure(18);
    const gpio2 = new GPIOMeasure(19);
    const gpio3 = new GPIOMeasure(20);

    try {
        console.log('\nüöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ GPIO');
        console.log('==========================================');

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ GPIO –∫–∞–∫ –≤—ã—Ö–æ–¥—ã
        gpio1.initialize('out');
        gpio2.initialize('out');
        gpio3.initialize('out');

        // –°–æ–∑–¥–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–∏–≥–∞–Ω–∏—è
        console.log('\nüí° –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–∏–≥–∞–Ω–∏—è...');
        for (let cycle = 0; cycle < 3; cycle++) {
            // –í–∫–ª—é—á–∞–µ–º –ø–æ –æ—á–µ—Ä–µ–¥–∏
            gpio1.setHigh();
            await sleep(200);
            gpio2.setHigh();
            await sleep(200);
            gpio3.setHigh();
            await sleep(200);

            // –í—ã–∫–ª—é—á–∞–µ–º –ø–æ –æ—á–µ—Ä–µ–¥–∏
            gpio1.setLow();
            await sleep(200);
            gpio2.setLow();
            await sleep(200);
            gpio3.setLow();
            await sleep(200);
        }

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö GPIO:', error.message);
    } finally {
        // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –≤—Å–µ —Ä–µ—Å—É—Ä—Å—ã
        console.log('\nüßπ –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–µ—Å—É—Ä—Å–æ–≤...');
        gpio1.cleanup();
        gpio2.cleanup();
        gpio3.cleanup();
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏
function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–∏ Ctrl+C
process.on('SIGINT', () => {
    console.log('\n\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...');
    process.exit(0);
});

// –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
if (require.main === module) {
    console.log('üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é:');
    console.log('1. –û–¥–∏–Ω–æ—á–Ω—ã–π GPIO (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)');
    console.log('2. –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ GPIO');

    const mode = process.argv[2];

    if (mode === 'multi') {
        demonstrateMultipleGPIO();
    } else {
        demonstrateGPIOControl();
    }
}

module.exports = {
    demonstrateGPIOControl,
    demonstrateMultipleGPIO
};